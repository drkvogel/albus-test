import Head from 'next/head'
// import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import { useState, useEffect, useRef } from 'react'

const inter = Inter({ subsets: ['latin'] })

// TODO: get key from env, not hardcode
const apiKey: string = "NfO8LdX0HmFOokLomziuscOyczIpZFp6FQvnOAAm"       // Freecurrencyapi.com API key
const apiEndpoint: string = "https://api.freecurrencyapi.com/v1/latest" // Freecurrencyapi.com endpoint

let rates = {}

const log = (msg: string) => {
  console.log(new Date().toUTCString() + ": " + msg)
}

function getRates() {
  log("getRates")

  fetch(apiEndpoint + "?apikey=" + apiKey, {
    method: "GET",
    headers: {
      'Accept': 'application/json',
    },
  })
    .then((res) => {
      if (res.ok) {
        return res.json()
      }
      throw new Error("API response: status: " + res.status); //  + res.text()
    })
    .then((data) => {
      setRates(data)
    })
    .catch((error) => {
      console.log(error)
      alert(error)

      // try to get cached exchange rates
      if (typeof window !== 'undefined') {
        const rates = localStorage.getItem("rates");
        log("rates from localStorage: " + rates)
        if (rates !== null) {
          setRates(JSON.parse(rates))
        } else {
          alert("Exchange rates fetch failed and there are no cached exchange rates, sorry!")
        }
      }
    });
  // TODO improve error handling, error message
}

function setRates(data: JSON) {
  log(JSON.stringify(data))
  rates = data;
  localStorage.setItem("rates", JSON.stringify(data))
}

function setSrcRate(amount: number) {

}

let handleSrcRateChange = (e: any) => {
  setSrcRate(e.target.value)
}

export default function Home() {
  const dataFetchedRef = useRef(false);

  useEffect(() => {
    log("useEffect")
    if (dataFetchedRef.current) return;
    dataFetchedRef.current = true;
    getRates()
  }, [])

  var resetName = () => {

  }

  return (
    <>
      <Head>
        <title>Currency Converter</title>
        <meta name="description" content="A simple browser-based Currency Converter in Next.JS. Initially generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.center}>
          <p className={inter.className}>Currency Converter</p>
        </div>

        <div className="w-full max-w-xs">
        <form className="shadow-md rounded px-8 pt-6 pb-8 mb-4">
          <label htmlFor="src-select">Source currency</label>
          <select name="src-select" onChange={handleSrcRateChange}>
            <option value="Select a currency"> -- Select a currency -- </option>
            {/* GBP ii. EUR iii. USD iv. ISK (Icelandic Kr贸na) */}
            <option value="GBP">Bristish Pound Sterling (GBP)</option>
            <option value="EUR">Euro (EUR)</option>
            <option value="USD">US Dollar (USD)</option>
            <option value="ISK">Icelandic Kr贸na (ISK)</option>
          </select>

          <label htmlFor="src-amount">Source amount</label>
          <input
            type="text"
            id="sourceAmount"
            className="input input__lg"
            name="src-amount"
            autoComplete="off"
          />
          <br />

          <label htmlFor="dst-select">Target currency</label>
          <select name="dst-select" onChange={handleSrcRateChange}>
            <option value="Select a currency"> -- Select a currency -- </option>
            {/* GBP ii. EUR iii. USD iv. ISK (Icelandic Kr贸na) */}
            <option value="GBP">Bristish Pound Sterling (GBP)</option>
            <option value="EUR">Euro (EUR)</option>
            <option value="USD">US Dollar (USD)</option>
            <option value="ISK">Icelandic Kr贸na (ISK)</option>
          </select>

          <label htmlFor="dst-amount">Target currency amount</label>
          <input
            type="text"
            id="dst-amount"
            className="input input__lg"
            name="text"
            autoComplete="off"
          />
          {/* <button type="reset">Reset</button> */}
          <br />
          <button type="submit">Convert</button>
          <button onClick={resetName}>Reset</button>
        </form>
        </div>
        <div className={styles.description}>
          A simple browser-based Currency Converter
        </div>
      </main>
    </>
  )
}
